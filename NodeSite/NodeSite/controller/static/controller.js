// Generated by CoffeeScript 1.7.1
'use strict';
var ControllerList, getController, getControllerList, putController, renderControllerList;

ControllerList = (function() {
  function ControllerList(params) {
    var $renderTo, renderTo;
    renderTo = params.renderTo, this.templateName = params.templateName;
    console.log("[controller.coffee]", renderTo);
    this.$renderTo = $renderTo = $(renderTo);
    $renderTo.on("click", "input[type=checkbox]", $.proxy(this.clickEvent, this));
    this.intervalTime = 60000;
    this.interval();
    this.roomId = null;
  }

  ControllerList.prototype.clickEvent = function(e) {
    var $elt, action, answer, controllerId;
    $elt = $(e.target);
    answer = $elt.prop('checked');
    if (answer === true) {
      action = "on";
    } else if (answer === false) {
      action = "off";
    }
    controllerId = $elt.attr("cid");
    return putController(controllerId, action);
  };

  ControllerList.prototype.update = function(cid, value) {
    var $switch;
    if (!cid || !value) {
      return;
    }
    $switch = this.$renderTo.find("input[cid=" + cid + "]");
    if (value === "on") {
      return $switch.attr("checked", "checked");
    } else {
      return $switch.removeAttr("checked");
    }
  };

  ControllerList.prototype.render = function(context) {
    var $renderTo, clHTML, source, template, templateName;
    $renderTo = this.$renderTo, templateName = this.templateName;
    this.roomId = context[0].roomId;
    source = $(templateName).html();
    template = Handlebars.compile(source);
    Handlebars.registerHelper("checked", function() {
      var checked, state;
      state = this.state;
      if (state === "on") {
        checked = "checked";
      } else {
        checked = "";
      }
      return checked;
    });
    clHTML = template({
      context: context
    });
    this.context = context;
    return $renderTo.html(clHTML);
  };

  ControllerList.prototype.interval = function() {
    return setInterval((function(_this) {
      return function() {
        if (!_this.roomId) {
          return;
        }
        return $.ajax({
          url: "/controller/update/room/" + _this.roomId + "/",
          type: "GET",
          success: function(data) {
            return _this.render(data.body);
          },
          fail: function() {
            return alert("controller update failed");
          }
        });
      };
    })(this), this.intervalTime);
  };

  return ControllerList;

})();

renderControllerList = function(params) {
  var clHTML, context, renderTo, source, template, templateName;
  renderTo = params.renderTo, templateName = params.templateName, context = params.context;
  source = $(templateName).html();
  console.log(source);
  template = Handlebars.compile(source);
  clHTML = template({
    context: context
  });
  return $(renderTo).html(clHTML);
};

getControllerList = function(roomId, callback) {
  var url;
  if (arguments.length === 1) {
    callback = roomId;
    url = "/controller/list/";
  } else {
    url = "/controller/list/room/" + roomId + "/";
  }
  return $.ajax({
    url: url,
    type: "GET",
    success: function(data) {
      if (_.isFunction(callback)) {
        return callback(data);
      }
    },
    fail: function() {
      return alert("Get controller List Fail");
    }
  });
};

getController = function(controllerId, callback) {};

putController = function(cid, action) {
  return $.ajax({
    url: "/controller/" + cid + "/",
    type: "PUT",
    data: {
      action: action
    },
    success: function(data) {
      return alert(data.body);
    },
    fail: function() {
      return alert("PUT CONTROLLER CONNECTION FAIL!");
    }
  });
};
