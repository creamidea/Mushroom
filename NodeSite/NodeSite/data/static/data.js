// Generated by CoffeeScript 1.7.1
'use strict';
var SearchChart, chart, data, dataPkgForD3, drawCumulativeLineChart, drawLine, drawLineChart, drawLineWithFocusChart, duration, generateData, getData, getDataFromS, redraw, renderRTChart, requestData, sensorEnToCn;

sensorEnToCn = {
  "temperature": "温度",
  "co2": "二氧化碳",
  "humidity": "湿度",
  "light": "光照"
};

getDataFromS = function(context) {
  var callback, requestData, url;
  url = context.url, requestData = context.requestData, callback = context.callback;
  return $.ajax({
    url: url,
    type: "GET",
    data: requestData,
    success: function(data) {
      return callback(data);
    },
    fail: function(data) {
      return alert("通讯失败");
    }
  });
};

dataPkgForD3 = function(data) {
  var key, sensor, sensorType, sensorTypeCN, v, values, _i, _j, _len, _len1, _sensors, _values;
  _sensors = {};
  for (_i = 0, _len = data.length; _i < _len; _i++) {
    sensor = data[_i];
    sensorType = sensor.sensorType;
    if (_sensors[sensorType] === void 0) {
      _sensors[sensorType] = [];
    }
    sensorTypeCN = sensorEnToCn[sensorType];
    key = "" + sensorTypeCN + "-" + sensor.sensorId + "-" + sensor.position;
    values = [];
    _values = sensor.values;
    for (_j = 0, _len1 = _values.length; _j < _len1; _j++) {
      v = _values[_j];
      values.push({
        x: (new Date(v[0])).getTime(),
        y: v[1]
      });
    }
    _sensors[sensorType].push({
      key: key,
      values: values
    });
  }
  return _sensors;
};

drawLineChart = function(opt) {
  var data, elt, xLabel, yLabel;
  elt = opt.elt, data = opt.data, xLabel = opt.xLabel, yLabel = opt.yLabel;
  if (elt && data) {
    return nv.addGraph(function() {
      var chart;
      chart = nv.models.lineChart().color(d3.scale.category10().range()).useInteractiveGuideline(true);
      chart.xAxis.axisLabel(xLabel).tickFormat(function(d) {
        return d3.time.format('%X')(new Date(d));
      });
      chart.yAxis.axisLabel(yLabel).tickFormat(d3.format('.02f'));
      d3.select(elt).datum(data).transition().duration(500).call(chart);
      nv.utils.windowResize(chart.update);
      return chart;
    });
  }
};

drawLineWithFocusChart = function(opt) {
  var chart, data, elt, xLabel, yLabel;
  elt = opt.elt, data = opt.data, xLabel = opt.xLabel, yLabel = opt.yLabel;
  chart = nv.models.lineWithFocusChart();
  chart.xAxis.axisLabel(xLabel).tickFormat(function(d) {
    return d3.time.format('%x')(new Date(d));
  });
  chart.yAxis.tickFormat(d3.format(',.2f'));
  chart.y2Axis.axisLabel(yLabel).tickFormat(d3.format(',.2f'));
  d3.select(elt).datum(data).transition().duration(500).call(chart);
  nv.utils.windowResize(chart.update);
  return chart;
};

drawCumulativeLineChart = function(opt) {
  var chart, data, elt, xLabel, yLabel;
  elt = opt.elt, data = opt.data, xLabel = opt.xLabel, yLabel = opt.yLabel;
  chart = nv.models.cumulativeLineChart().x(function(d) {
    return d[0];
  }).y(function(d) {
    return d[1] / 100;
  }).color(d3.scale.category10().range());
  chart.xAxis.axisLabel(xLabel).tickFormat(function(d) {
    return d3.time.format('%X')(new Date(d));
  });
  chart.yAxis.tickFormat(d3.format(',.2f'));
  d3.select(elt).datum(data).transition().duration(500).call(chart);
  nv.utils.windowResize(chart.update);
  return chart;
};

requestData = function(roomId) {
  return $.ajax({
    url: "/data/room/" + roomId + "/",
    type: "get",
    data: {
      startTime: "2014-03-30 00:00:00",
      endTime: "2014-03-31 23:59:59"
    },
    success: function(data) {
      var dataBody, key, lines, sensor, v, values, _i, _j, _len, _len1, _values;
      dataBody = data.body;
      lines = [];
      for (_i = 0, _len = dataBody.length; _i < _len; _i++) {
        sensor = dataBody[_i];
        key = "" + sensor.sensorId + "-" + sensor.sensorType + "-" + sensor.position;
        values = [];
        _values = sensor.values;
        for (_j = 0, _len1 = _values.length; _j < _len1; _j++) {
          v = _values[_j];
          values.push({
            x: (new Date(v[0])).getTime(),
            y: v[1]
          });
        }
        lines.push({
          key: key,
          values: values
        });
      }
      return nv.addGraph(function() {
        var chart;
        chart = nv.models.lineChart().useInteractiveGuideline(true);
        chart.xAxis.axisLabel('Temperature').tickFormat(function(d) {
          return d3.time.format('%x')(new Date(d));
        });
        chart.yAxis.axisLabel('Voltage (v)').tickFormat(d3.format('.02f'));
        d3.select('#chart svg').datum(lines).transition().duration(500).call(chart);
        return nv.utils.windowResize(chart.update);
      });
    },
    fail: function() {
      return alert("GET ROOM DATA FAILED!");
    }
  });
};

generateData = function() {
  var cos, i, sin, _i;
  sin = [];
  cos = [];
  for (i = _i = 0; _i <= 100; i = ++_i) {
    sin.push({
      x: i,
      y: Math.sin(i / 10)
    });
    cos.push({
      x: i,
      y: .5 * Math.cos(i / 10)
    });
  }
  return [
    {
      values: sin,
      key: 'Sine Wave',
      color: '#ff7f0e'
    }, {
      values: cos,
      key: 'Cosine Wave',
      color: '#2ca02c'
    }
  ];
};

drawLine = function() {
  return nv.addGraph(function() {
    var chart;
    chart = nv.models.lineChart().useInteractiveGuideline(true);
    chart.xAxis.axisLabel('Time (ms)').tickFormat(d3.format(',r'));
    chart.yAxis.axisLabel('Voltage (v)').tickFormat(d3.format('.02f'));
    d3.select('#chart svg').datum(generateData()).transition().duration(500).call(chart);
    nv.utils.windowResize(chart.update);
    return chart;
  });
};

getData = function() {
  var arr, i, theDate, _i;
  arr = [];
  theDate = new Date(2014, 1, 1, 0, 0, 0, 0);
  for (i = _i = 0; _i <= 30; i = ++_i) {
    arr.push({
      x: new Date(theDate.getTime()),
      y: Math.random() * 100
    });
    theDate.setDate(theDate.getDate() + 1);
  }
  return arr;
};

data = [
  {
    "key": "Long",
    "values": getData()
  }
];

chart = null;

duration = 20000;

redraw = function() {
  return nv.addGraph(function() {
    chart = nv.models.cumulativeLineChart().x(function(d) {
      return d.x;
    }).y(function(d) {
      return d.y / 100;
    }).color(d3.scale.category10().range());
    chart.xAxis.tickFormat(function(d) {
      return d3.time.format('%x')(new Date(d));
    });
    chart.yAxis.tickFormat(d3.format(',.1%'));
    d3.select('#realtime-chart-1 svg').datum(data).transition().duration(500).call(chart);
    nv.utils.windowResize(chart.update);
    return chart;
  });
};

redraw();

renderRTChart = function(datapkg) {
  var html, source, template;
  source = $("#realtime-chart-template").html();
  template = Handlebars.compile(source);
  Handlebars.registerHelper('cn-name', function(obj) {
    var key;
    key = obj.data.key;
    return sensorEnToCn[key];
  });
  return html = template({
    datapkg: datapkg
  });
};

SearchChart = (function() {
  function SearchChart(params) {
    var $renderTo, roomId;
    roomId = params.roomId, $renderTo = params.$renderTo;
    if ($renderTo instanceof jQuery) {
      $renderTo.on("blur", "select", $.proxy(this.blurEvent, this));
      $renderTo.on("blur", "input", $.proxy(this.blurEvent, this));
      $renderTo.on("submit", "form", $.proxy(this.submit, this));
    }
    this.data = {
      roomId: roomId,
      sensorType: "all"
    };
    this.$renderTo = $renderTo;
    this.charts = {};
  }

  SearchChart.prototype.blurEvent = function(e) {
    var $elt, name, value;
    $elt = $(e.target);
    name = $elt.attr("name");
    value = $elt.val();
    this.data[name] = value;
    return e.stopPropagation();
  };

  SearchChart.prototype.submit = function(e) {
    var $renderTo;
    $renderTo = this.$renderTo;
    data = this.data;
    $.ajax({
      url: "/search/",
      type: "GET",
      data: data,
      success: (function(_this) {
        return function(data) {
          var datapkg, html, id, key, _results;
          console.log(data);
          datapkg = dataPkgForD3(data.body);
          console.log(datapkg);
          _results = [];
          for (key in datapkg) {
            data = datapkg[key];
            if (_this.charts[key] === void 0) {
              id = "search-" + key + "-chart";
              html = "<div id=" + id + " class=chart><svg></svg></div>";
              _this.charts[key] = $renderTo.append(html);
            }
            _results.push(drawLineChart({
              elt: "#search-" + key + "-chart svg",
              data: data,
              xLabel: "采集" + sensorEnToCn[key] + "时间",
              yLabel: "采集值"
            }));
          }
          return _results;
        };
      })(this),
      fail: function() {
        return alert("Search Fail!");
      }
    });
    return e.preventDefault();
  };

  SearchChart.prototype.render = function() {
    var html, source, template;
    source = $("#search-chart-template").html();
    template = Handlebars.compile(source);
    html = template({
      author: "icecream"
    });
    if (this.$renderTo instanceof jQuery) {
      this.$renderTo.html(html);
    }
    return html;
  };

  return SearchChart;

})();
