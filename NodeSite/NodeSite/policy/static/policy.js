// Generated by CoffeeScript 1.7.1
'use strict';
var Policy, PolicyPresenter, policyAddTpl, policyRecordTpl, postFormTpl;

Policy = (function() {
  function Policy(pid, nowPos) {
    this.pid = pid;
    this.nowPos = nowPos;
    $.observable(this);
    this.data = [];
    this.syncInterval = 5000;
    this.saveInterval = 4000;
  }

  Policy.prototype.add = function(data, insertIndex) {
    var affix, length, prefix, __data;
    if (arguments.length > 0) {
      __data = this.data;
      length = __data.length;
      if (0 <= insertIndex && insertIndex < length) {
        prefix = __data.slice(0, insertIndex);
        affix = __data.slice(insertIndex);
        this.data = [].concat(prefix, data, affix);
      } else {
        this.data = __data.concat(data);
      }
      this.flagEdit();
      return this.trigger("add", this.data);
    }
  };

  Policy.prototype.remove = function(index) {
    if (index !== void 0 || index !== null) {
      this.data.splice(index, 1);
      return this.trigger("remove", this.data);
    }
  };

  Policy.prototype.update = function(data, index) {
    if (arguments.length === 1) {
      if (!_.isEqual(data, this.data)) {
        this.data = data;
        return this.trigger("update", this.data);
      }
    } else {
      data["isEdit"] = true;
      this.data[index] = data;
      return this.trigger("update", this.data);
    }
  };

  Policy.prototype.flagEdit = function() {
    var data, index, item, nowPos, _i, _len, _results;
    nowPos = this.nowPos;
    data = this.data;
    _results = [];
    for (index = _i = 0, _len = data.length; _i < _len; index = ++_i) {
      item = data[index];
      this.data[index]["isEdit"] = true;
      if (_.isNumber(this.nowPos) && this.nowPos >= 0) {
        if (index <= nowPos) {
          _results.push(this.data[index]["isEdit"] = false);
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Policy.prototype.get = function() {
    if (!this.pid) {
      return -1;
    }
    return $.ajax({
      url: "/policy/" + this.pid + "/",
      type: "GET",
      success: (function(_this) {
        return function(data) {
          var body;
          body = data.body;
          if (_this.data.length === 0) {
            return _this.add(body.policy);
          } else {
            return _this.update(body);
          }
        };
      })(this),
      fail: function() {
        return alert("Policy sync failed!");
      }
    });
  };

  Policy.prototype.sync = function(syncInterval) {
    if (!this.pid) {
      return;
    }
    if (_.isNumber(syncInterval)) {
      this.syncInterval = syncInterval;
      return setInterval((function(_this) {
        return function() {
          return _this.get();
        };
      })(this), this.syncInterval);
    }
  };

  Policy.prototype.save = function() {
    var key;
    key = this.saveKey = "policySave";
    return setInterval((function(_this) {
      return function() {
        var value;
        if (_this.data.length > 0) {
          value = JSON.stringify(_this.data);
          return localStorage[key] = value;
        }
      };
    })(this), this.saveInterval);
  };

  Policy.prototype.load = function(key) {
    key = this.saveKey;
    this.data = JSON.parse(localStorage[key]);
    return this.add();
  };

  return Policy;

})();

PolicyPresenter = (function() {
  function PolicyPresenter(model, $wrpelt, mode) {
    var $add, html, source, template;
    this.$wrpelt = $wrpelt;
    this.mode = mode;
    model.on("add", $.proxy(this.render, this));
    model.on("update", $.proxy(this.render, this));
    model.on("remove", $.proxy(this.render, this));
    this.model = model;
    source = $("#policy-out-template").html();
    template = Handlebars.compile(source);
    html = template({
      title: "策略"
    });
    this.$wrpelt.html(html);
    this.recordTpl = Handlebars.compile(policyRecordTpl);
    this.$policy = $('tbody', this.$wrpelt);
    if (this.mode === "view") {
      this.model.get();
      this.isEdit = false;
    }
    if (this.mode === "edit") {
      this.model.get();
      this.isEdit = true;
      template = Handlebars.compile(policyAddTpl);
      html = template();
      $add = $(html).appendTo($('.policy-add', this.$wrpelt));
      $add.submit($.proxy(this.addEvent, this));
      this.$policy.on("click", "button[action=remove]", $.proxy(this.removeEvent, this));
      this.$policy.on("click", "button[action=edit]", $.proxy(this.editEvent, this));
      this.$policy.on("click", "button[action=confirm]", $.proxy(this.updateEvent, this));
      this.$policy.on("keypress", "tr td input", $.proxy(this.updateEvent, this));
    }
  }

  PolicyPresenter.prototype.postEvent = function(e) {
    var m, meta, metaA, _i, _len;
    if (e) {
      e.preventDefault();
    }
    metaA = $(e.target).serializeArray();
    meta = {};
    for (_i = 0, _len = metaA.length; _i < _len; _i++) {
      m = metaA[_i];
      meta[m.name] = m.value;
    }
    return $.ajax({
      url: "/policy/create/",
      type: "POST",
      data: {
        roomId: meta.roomId,
        description: meta.description,
        startDate: meta.startDate,
        startTime: meta.startTime,
        policy: JSON.stringify(this.model.data)
      },
      success: function(data) {
        return alert(data.body);
      },
      fail: function() {
        return alert("POST POLICY FAILED!");
      }
    });
  };

  PolicyPresenter.prototype.removeEvent = function(e) {
    var $tr, answer, index;
    $tr = $(e.target).closest("tr");
    index = $tr.index();
    answer = confirm("你确定删除吗？");
    if (answer) {
      return this.model.remove(index);
    }
  };

  PolicyPresenter.prototype.updateEvent = function(e) {
    var $input, $td, $tr, data, index;
    $input = $(e.target);
    $td = $input.closest("td");
    $tr = $td.closest("tr");
    if (e.which === 13 || e.type === "click") {
      index = $tr.index();
      data = {};
      $('input', $tr).each(function(index, elt) {
        var $elt, name, _ref;
        $elt = $(elt);
        name = $elt.attr("name");
        if (name === "date" || name === "hour") {
          return data[name] = parseInt($elt.val(), 10);
        } else if (name === "light") {
          return data[name] = $elt.val();
        } else {
          _ref = name.split('-'), name = _ref[0], index = _ref[1];
          if (data[name] === void 0) {
            data[name] = [];
          }
          return data[name][index] = parseFloat($elt.val());
        }
      });
      return this.model.update(data, index);
    }
  };

  PolicyPresenter.prototype.editEvent = function(e) {
    var $elt, $tr;
    $elt = $(e.target);
    $elt.removeClass("glyphicon-pencil").addClass("glyphicon-ok");
    $elt.closest("button").attr("action", "confirm");
    $tr = $elt.closest("tr");
    $('input', $tr).show().each(function(index, elt) {
      var value;
      $elt = $(elt);
      if (index === 0) {
        $elt.focus().select();
      }
      value = $elt.siblings('p').text();
      return $(elt).val(value);
    });
    return $('p', $tr).hide();
  };

  PolicyPresenter.prototype.addEvent = function(e) {
    var data, index, insertPosition, name, preData, s, serialize, serializeLen, value, _i, _len, _ref, _ref1;
    if (e) {
      e.preventDefault();
    }
    serialize = $(e.target).serializeArray();
    serializeLen = serialize.length;
    insertPosition = parseInt(serialize[serializeLen - 1].value, 10);
    if (isNaN(insertPosition)) {
      insertPosition = this.model.data.length;
    } else if (insertPosition <= 0) {
      insertPosition = 1;
    }
    preData = this.model.data[insertPosition - 1];
    data = {};
    for (_i = 0, _len = serialize.length; _i < _len; _i++) {
      s = serialize[_i];
      if (s.name === "insertPosition") {
        break;
      }
      if ((_ref = s.name) === "date" || _ref === "hour" || _ref === "light") {
        if (s.value === "") {
          data[s.name] = preData[s.name];
        } else {
          data[s.name] = s.value;
        }
      } else {
        _ref1 = s.name.split('-'), name = _ref1[0], index = _ref1[1];
        if (data[name] === void 0) {
          data[name] = [];
        }
        value = parseFloat(s.value);
        if (isNaN(value)) {
          data[name][index] = preData[name][index];
        } else {
          data[name][index] = parseFloat(s.value);
        }
      }
    }
    if (insertPosition < this.model.data.length) {
      return this.model.add(data, insertPosition - 1);
    } else {
      return this.model.add(data, insertPosition);
    }
  };

  PolicyPresenter.prototype.reflush = function() {
    var nowPos;
    nowPos = this.nowPos || -1;
    return this.$policy.children().each(function(index, elt) {
      var $elt, id;
      $elt = $(elt);
      id = index + 1;
      $elt.children(":first").html("<p>" + id + "</p>");
      if (index <= nowPos) {
        return $('td:last-child', $(elt)).remove();
      }
    });
  };

  PolicyPresenter.prototype.render = function(data) {
    var html, policy;
    policy = data;
    Handlebars.registerHelper("number", function(context) {
      return context.data.index + 1;
    });
    html = this.recordTpl({
      context: policy,
      isEdit: this.isEdit
    });
    this.$policy.html(html);
    return this.$policy.trigger($.Event("rendern.policy.mr"));
  };

  PolicyPresenter.prototype.saveUI = function() {
    var $el, html, key, value;
    html = [];
    for (key in localStorage) {
      value = localStorage[key];
      html.push("<p fade in><a href='#/policy/" + key + "'>" + key + "</a><button type='button' class='close' aria-hidden='true' action='remove-save'><i class='glyphicon glyphicon-remove'></i></button></p>");
    }
    $el = $('.save-policy', this.$wrpelt).html(html.join(''));
    $('a', $el).click((function(_this) {
      return function(e) {
        var $closest, $elt;
        if (e) {
          e.preventDefault();
        }
        $elt = $(e.target);
        key = $elt.text();
        $closest = $elt.closest('p');
        $closest.siblings('p').each(function() {
          return $(this).removeClass("active");
        }).end().addClass("active");
        return _this.model.load(key);
      };
    })(this));
    return $("button[action=remove-save]", $el).click(function(e) {
      var $button, answer;
      answer = confirm("你确定删除吗？");
      $button = $(e.target).closest("button");
      if (answer) {
        key = $button.siblings("a").text();
        delete localStorage[key];
        return $button.alert('close');
      }
    });
  };

  return PolicyPresenter;

})();

policyRecordTpl = '{{#each context}}\n  <tr>\n    <td class="number"><p>{{number}}</p></td>\n    <td class="date">\n      <p>{{date}}</p>\n      <input type="text" name="date" value="" />\n    </td>\n    <td class="hour">\n      <p>{{hour}}</p>\n      <input type="text" name="hour" value="" />\n    </td>\n    {{#each co2}}\n    <td class="co2">\n      <p>{{this}}</p>\n      <input type="text" name="co2-{{@index}}" value="" />\n    </td>\n    {{/each}}\n    {{#each temperature}}\n    <td class="temperature">\n      <p>{{this}}</p>\n      <input type="text" name="temperature-{{@index}}" value="" />\n    </td>\n    {{/each}}\n    {{#each humidity}}\n    <td class="humidity">\n      <p>{{this}}</p>\n      <input type="text" name="humidity-{{@index}}" value="" />\n    </td>\n    {{/each}}\n    {{#each brightness}}\n    <td class="brightness">\n      <p>{{this}}</p>\n      <input type="text" name="brightness-{{@index}}" value="" />\n    </td>\n    {{/each}}\n    <td light="{{lightColor}}">\n      <p>{{lightColor}}</p>\n      <input type="text" name="light" value="" />\n    </td>\n\n    <td>\n    {{#if ../isEdit}}\n    {{! ../isEdit是模式：edit 还是 view}}\n    {{#if isEdit}}\n    {{!这里的isEdit是标志每一行数据是否允许被编辑}}\n      <button type="button" class="close" action="remove"><i class="glyphicon glyphicon-remove"></i></button>\n      <button type="button" class="close" action="edit"><i class="glyphicon glyphicon-pencil"></i></button>\n    {{else}}\n      <p>不能被编辑</p>\n    {{/if}}\n    {{/if}}\n    </td>\n    \n  </tr>\n{{/each}}';

policyAddTpl = '<form class="form form-inline" role="form" name="add-record-form">\n    \n    <div class="form-group">\n      <label class="" for="date">间隔天数/时间</label>\n      <input type="number" class="form-control" id="date" name="date" placeholder="间隔天数">\n      <input type="number" class="form-control" id="hour" name="hour" placeholder="间隔小时">\n    </div>\n      \n    <div class="form-group">\n      <label class="" for="co2">二氧化碳范围</label>\n      <input type="number" class="form-control" id="co2-0" name="co2-0" placeholder="二氧化碳下限">\n      <input type="number" class="form-control" id="co2-1" name="co2-1" placeholder="二氧化碳上限">\n    </div>\n      \n    <div class="form-group">\n      <label class="" for="temperature">温度范围</label>\n      <input type="number" class="form-control" id="temperature-0" name="temperature-0" placeholder="温度下限">\n      <input type="number" class="form-control" id="temperature-1" name="temperature-1" placeholder="温度上限">\n    </div>\n      \n    <div class="form-group">\n      <label class="" for="humidity">湿度范围</label>\n      <input type="number" class="form-control" id="humidity-0" name="humidity-0" placeholder="湿度下限">\n      <input type="number" class="form-control" id="humidity-1" name="humidity-1" placeholder="湿度上限">\n    </div>\n      \n    <div class="form-group">\n      <label class="" for="brightness">光照范围</label>\n      <input type="number" class="form-control" id="brightness-0" name="brightness-0" placeholder="光照下限">\n      <input type="number" class="form-control" id="brightness-1" name="brightness-1" placeholder="光照上限">\n    </div>\n\n    <div class="form-group">\n      <label class="" for="light">光带颜色</label>\n      <input type="text" class="form-control" id="light" name="light" placeholder="光带颜色">\n    </div>\n    <br />\n    <div class="form-group">\n      <label class="" for="insertPosition">插入位置</label>\n      <input type="number" class="form-control" id="insertPosition" name="insertPosition" placeholder="插入位置">\n    </div>\n    <br />\n    <button type="submit" class="btn btn-primary" name="add-policy">增加</button>\n</form>';

postFormTpl = '<form class="form" role="form" name="post-form">\n  <div class="form-group">\n    <label class="" for="room-id">房间号</label>\n    <input type="text" class="form-control" id="room-id" name="roomId" placeholder="房间号" value="{{roomId}}">\n  </div>\n  <div class="form-group">\n    <label class="" for="description">描述</label>\n    <input type="text" class="form-control" id="description" name="description" placeholder="描述" value="{{description}}">\n  </div>\n  <div class="form-group">\n    <label class="" for="start-date">运行起始日期</label>\n    <input type="date" class="form-control" id="start-date" name="startDate" placeholder="运行起始日期" style="display: block" value="{{startDate}}">\n  </div>\n  <div class="form-group">\n    <label class="" for="start-date">运行起始时间</label>\n    <input type="time" class="form-control" id="start-time" name="startTime" placeholder="运行起始时间" style="display: block" value="{{startTime}}">\n  </div>\n  <button type="submit" name="post" class="btn btn-success">提交</button>\n</form>';
