// Generated by CoffeeScript 1.7.1
$(function() {
  'use strict';
  var $policyDoneList, $policyNow, $policyPlanForm, $policyPlanList, $policyPlanSection, $renderTo, ajaxDelete, btnNewPolicy, editImage, editOutput, editedEvent, editingEvent, getChoice, getData, hideDropdown, pickerListen, pid, plantName, policy, removeEvent, renderDoneList, renderPlanList, saveOutput, showDropdown, submitPlan;
  pid = window.location.pathname.replace(/\/policy\/(\d+)\//g, "$1");
  console.log(pid);
  $renderTo = $('#policy');
  policy = new Policy(pid);
  new PolicyPresenter(policy, $renderTo, "view");
  btnNewPolicy = "<a href=\"/policy/create/?from-policy=" + pid + "\"><button class=\"btn btn-success\">在此基础上新建</button></a>";
  $('.policy-add', $renderTo).html(btnNewPolicy);
  $policyNow = $('#policy-now');
  $.ajax({
    url: "/policy/" + pid + "/now/",
    type: "GET",
    success: function(data) {
      var html, now, nowPos, room, roomDesc, roomId, rooms, rules, source, template, _i, _len, _results;
      source = $('#policy-now-template').html();
      template = Handlebars.compile(source);
      rooms = data.body;
      _results = [];
      for (_i = 0, _len = rooms.length; _i < _len; _i++) {
        room = rooms[_i];
        roomId = room.roomId, roomDesc = room.roomDesc, now = room.now, rules = room.rules;
        html = template({
          roomId: roomId,
          roomDesc: roomDesc,
          context: rules
        });
        $policyNow.append(html);
        nowPos = 0;
        $("#room-" + roomId + " table tbody", $policyNow).children().each(function(index, elt) {
          var $date, $elt, $i;
          $elt = $(elt);
          $date = $('td.date', $elt);
          if ($date.text() === now) {
            nowPos = index;
            html = "<i class=\"glyphicon glyphicon-forward\"></i>";
            $date.prepend(html);
            $i = $date.find('i');
            return $i.css("position", "absolute").css("left", "10px").css("top", "10px");
          }
        });
        _results.push($("#room-" + roomId + " a").attr('href', encodeURI("/policy/create/?from-policy=" + pid + "&&nowPos=" + nowPos + "&&now=" + now)));
      }
      return _results;
    },
    fail: function() {
      return alert("获取该策略正在执行情况失败，请检查网络连接。");
    }
  });
  $policyPlanSection = $('#policy-plan-section');
  $policyPlanList = $('#policy-plan-list');
  renderPlanList = function(plan) {
    var html, source, template;
    if (!_.isArray(plan)) {
      return -1;
    }
    source = $('#policy-plan-template').html();
    template = Handlebars.compile(source);
    return html = template({
      plan: plan
    });
  };
  $policyPlanForm = $('#policy-plan form');
  getData = function($elt, url, isShow) {
    return $.ajax({
      url: url,
      type: "GET",
      success: function(data) {
        var $dropdown, html, source, template;
        source = $("#dropdown-template").html();
        template = Handlebars.compile(source);
        console.log("[room desc list]:", data);
        html = template({
          rooms: data.body,
          isShow: isShow
        });
        $dropdown = $elt.siblings('.dropdown');
        if ($dropdown.length === 0) {
          return $(html).insertAfter($elt);
        } else {
          return $dropdown.replaceWith($(html));
        }
      },
      fail: function() {
        return alert("获取房间描述列表失败，请检查网络连接。");
      }
    });
  };
  showDropdown = function(e) {
    var $elt, isShow, target, url;
    $elt = $(this);
    target = $elt.attr("name");
    switch (target) {
      case "roomDesc":
        url = "/room/description/list/";
        isShow = false;
        break;
      case "plantName":
        url = "/plant/name/list/";
        isShow = true;
    }
    return getData($elt, url, isShow);
  };
  hideDropdown = function(e) {
    var $elt;
    return $elt = $(this);
  };
  getChoice = function(e) {
    var $dropdown, $elt, $input, name;
    console.log(e);
    $elt = $(this);
    name = $.trim($elt.text());
    $dropdown = $elt.closest('.dropdown');
    $input = $dropdown.siblings('input');
    $input.val(name);
    return $dropdown.remove();
  };
  plantName = {
    remove: function(e) {
      var $a, $button, $li, name, plantId;
      if (!confirm("你确定奥删除吗？")) {
        return -1;
      }
      $button = $(this);
      $li = $button.closest('li');
      $a = $button.siblings('a');
      name = $.trim($a.text());
      plantId = $li.attr('mr-id');
      alert(plantId + ":" + name);
      return $.ajax({
        url: "/plant/" + plantId + "/",
        type: "DELETE",
        context: {
          $li: $li
        },
        data: {
          plantName: name
        },
        success: function(data) {
          if (data.code === 0) {
            return this.$li.remove();
          } else {
            return alert(data.body);
          }
        },
        fail: function() {
          return alert("删除失败，请检查网络连接。");
        }
      });
    },
    edit: function(e) {
      var $a, $button, $i, input;
      $i = $(e.target);
      $button = $i.parent();
      $a = $button.siblings('a');
      input = "<input type=\"text\" name=\"plant-name\" style=\"width: 72%\" value=\"" + ($.trim($a.text())) + "\" old-value=\"" + ($.trim($a.text())) + "\"/>";
      $a.replaceWith($(input));
      $i.removeClass('glyphicon-pencil').addClass('glyphicon-ok');
      return $button.attr("action", "edited-plantname");
    },
    edited: function(e) {
      var $button, $i, $input, $li, oldPlantName, plant_id;
      if (e.type === "keypress") {
        if (e.which === 13) {
          $input = $(this);
          $i = $input.siblings('button').find('i');
        }
      } else {
        $i = $(e.target);
        $button = $i.parent();
        $input = $button.siblings('input');
      }
      $li = $input.closest('li');
      plant_id = $li.attr('mr-id');
      console.log(e);
      oldPlantName = $.trim($input.attr('old-value'));
      plantName = $.trim($input.val());
      return $.ajax({
        url: "/plant/" + plant_id + "/name/",
        type: "PUT",
        data: {
          name: plantName
        },
        success: function(data) {
          var a;
          if (data.code === 0) {
            a = "<a role=\"menuitem\" tabindex=\"-1\" href=\"javascript:void(0)\" style=\"float: left\">" + plantName + "</a>";
          } else {
            a = "<a role=\"menuitem\" tabindex=\"-1\" href=\"javascript:void(0)\" style=\"float: left\">" + oldPlantName + "</a>";
          }
          $input.replaceWith($(a));
          $i.removeClass('glyphicon-ok').addClass('glyphicon-pencil');
          $button.attr("action", "edit-plantname");
          return e.preventDefault();
        },
        fail: function() {
          return alert("修改失败，请检查网络连接。");
        }
      });
    }
  };
  $policyPlanSection.on('focusin', 'input[data-api=mr-dropdown]', showDropdown);
  $policyPlanSection.on('focusout', 'input[data-api=mr-dropdown]', hideDropdown);
  $policyPlanSection.on('click', '.dropdown li a', getChoice);
  $policyPlanSection.on('click', 'button[action=remove-plantname]', plantName.remove);
  $policyPlanSection.on('click', 'button[action=edit-plantname]', plantName.edit);
  $policyPlanSection.on('click', 'button[action=edited-plantname]', plantName.edited);
  $policyPlanSection.on('keypress', 'li input[name=plant-name]', plantName.edited);
  submitPlan = function(e) {
    var m, meta, metaA, _i, _len;
    if (e) {
      e.preventDefault();
    }
    metaA = $(e.target).serializeArray();
    meta = {};
    for (_i = 0, _len = metaA.length; _i < _len; _i++) {
      m = metaA[_i];
      meta[m.name] = m.value;
    }
    console.log(meta);
    return $.ajax({
      url: "/policy/instance/create/",
      type: "POST",
      data: {
        pid: pid,
        roomDesc: meta.roomDesc,
        plantName: meta.plantName,
        startDate: meta.startDate,
        startTime: meta.startTime,
        policy: JSON.stringify(policy.data)
      },
      success: function(data) {
        var html, policyInstanceId;
        if (data.code === 0) {
          policyInstanceId = data.body;
          meta["policyInstanceId"] = policyInstanceId;
          html = renderPlanList([meta]);
          $policyPlanList.append(html);
          return $policyPlanList.trigger($.Event('appendn.planlist.mr'));
        } else {
          return alert(data.body);
        }
      },
      fail: function() {
        return alert("创建策略实例失败，请检查网络连接。");
      }
    });
  };
  $policyPlanForm.on('submit', submitPlan);
  $.ajax({
    url: "/policy/" + pid + "/plan/list/",
    type: "GET",
    success: function(data) {
      var html;
      html = renderPlanList(data.body);
      $policyPlanList.append(html);
      return $policyPlanList.trigger($.Event('rendern.planlist.mr'));
    },
    fail: function(data) {
      return alert("获取计划中的策略失败，请检查网络连接。");
    }
  });
  pickerListen = {
    add: function(e) {
      var $elt;
      console.log(this);
      $elt = $(e.target);
      $('.datepicker', $elt).pickadate({
        today: '今日',
        clear: '清除',
        format: 'yyyy/mm/dd'
      });
      return $('.timepicker', $elt).pickatime({
        format: 'HH:i',
        editable: true
      });
    }
  };
  $policyPlanList.on('rendern.planlist.mr', pickerListen.add);
  $policyPlanList.on('appendn.planlist.mr', pickerListen.add);
  $policyPlanList.on('update.planlist.mr', pickerListen.add);
  editingEvent = function(e) {
    var $li, $self;
    $self = $(this);
    $li = $self.closest("li");
    $li.find("input").each(function(index, elt) {
      return $(elt).show();
    });
    $li.find("span").each(function(index, elt) {
      return $(elt).hide();
    });
    return $self.find("i").removeClass("glyphicon-pencil").addClass("glyphicon-ok").end().attr("action", "edited");
  };
  editedEvent = function(e) {
    var $li, $self, data, piid;
    $self = $(this);
    $li = $self.closest("li");
    piid = $li.attr('policy-instance-id');
    data = {};
    $li.find("input").each(function(index, elt) {
      var $elt;
      $elt = $(elt);
      return data[$elt.attr("name")] = $.trim($elt.val());
    });
    data.policyInstanceId = piid;
    $.ajax({
      url: "/policy/instance/" + piid + "/",
      type: "PUT",
      data: {
        roomDesc: data.roomDesc,
        plantName: data.plantName,
        startAt: "" + data.startDate + " " + data.startTime
      },
      context: {
        data: data
      },
      success: function(data) {
        var html;
        if (data.code === 0) {
          html = renderPlanList([this.data]);
          $li.replaceWith(html);
          return $policyPlanList.trigger($.Event('update.planlist.mr'));
        } else {
          return alert(data.body);
        }
      },
      fail: function() {
        return alert("修改实例失败，请检查网络连接。");
      }
    });
    $li.find("input").each(function(index, elt) {
      return $(elt).hide();
    });
    $li.find("span").each(function(index, elt) {
      return $(elt).show();
    });
    return $self.find("i").removeClass("glyphicon-ok").addClass("glyphicon-pencil").end().attr("action", "editing");
  };
  removeEvent = function(e) {
    var $li, $self, piid;
    $self = $(this);
    $li = $self.closest("li");
    piid = $li.attr('policy-instance-id');
    return $.ajax({
      url: "/policy/instance/" + piid + "/",
      type: "DELETE",
      context: {
        "$li": $li
      },
      success: function(data) {
        return this.$li.remove();
      },
      fail: function() {
        return alert("发送删除策略实例失败， 请检查网络连接。");
      }
    });
  };
  $('#policy-plan-list').on('click', 'button[action=editing]', editingEvent);
  $('#policy-plan-list').on('click', 'button[action=edited]', editedEvent);
  $('#policy-plan-list').on('click', 'button[action=remove]', removeEvent);
  renderDoneList = function(done) {
    var html, source, template;
    if (!_.isArray(done)) {
      return -1;
    }
    source = $('#policy-done-template').html();
    template = Handlebars.compile(source);
    return html = template({
      done: done
    });
  };
  $policyDoneList = $("#policy-done-list");
  $.ajax({
    url: "/policy/" + pid + "/done/list/",
    type: "GET",
    success: function(data) {
      var html;
      html = renderDoneList(data.body);
      return $policyDoneList.html(html);
    },
    fail: function(data) {
      return alert("获取完成的策略实例失败，请检查网络连接。");
    }
  });
  saveOutput = function(e) {
    var $form, output, piid;
    if (e) {
      e.preventDefault();
    }
    $form = $(this);
    piid = $form.closest('li').attr('policy-instance-id');
    output = $form.find('[name=output]').val();
    return $.ajax({
      url: "/policy/instance/" + piid + "/output/save/",
      type: "POST",
      data: {
        "output": output
      },
      success: function(data) {
        var $span, btnEdit;
        if (data.code === 0) {
          btnEdit = '<button type="button" class="close" action="edit-output" >\n  <i class="glyphicon glyphicon-pencil"></i>\n</button>';
          $span = $form.siblings('p.output').find("span");
          $span.html(output + btnEdit);
          return $form.hide();
        } else {
          return alert(data.body);
        }
      },
      fail: function() {
        return alert("存储产量值失败，请检查网络连接。");
      }
    });
  };
  editOutput = function(e) {
    var $elt, $li;
    $elt = $(this);
    $li = $elt.closest('li');
    return $("form[action=save-output]", $li).show().find("[name=output]").focus();
  };
  $policyDoneList.on('submit', 'form[action=save-output]', saveOutput);
  $policyDoneList.on('click', 'button[action=edit-output]', editOutput);
  editImage = function(e) {
    var $elt, $li;
    $elt = $(this);
    $li = $elt.closest('li');
    return $("form[type=save-image]", $li).show();
  };
  $policyDoneList.on('click', 'button[action=edit-image]', editImage);
  ajaxDelete = function(outputId, $elt) {
    return $.ajax({
      url: "/policy/delete/output/",
      type: "DELETE",
      data: {
        outputId: outputId
      },
      success: function(data) {
        return $elt.remove();
      },
      fail: function(data) {
        return alert("删除失败！");
      }
    });
  };
  $('#output-area ul').on('click', 'button[action=remove]', function(e) {
    var $elt, answer, outputId;
    answer = confirm('你确定删除吗？');
    if (answer) {
      $elt = $(this).closest('li');
      outputId = $elt.attr('output-id');
      return ajaxDelete(outputId, $elt);
    }
  });
  $('.datepicker').pickadate({
    today: '今日',
    clear: '清除',
    format: 'yyyy/mm/dd'
  });
  $('.timepicker').pickatime({
    format: 'HH:i',
    editable: true
  });
});
