// Generated by CoffeeScript 1.7.1
'use strict';
var $averages, AverageUI, Room, RoomUI, context, render, renderRoom, renderRoomList, renderRoomMeta, renderSensorsList, renderStatic, sensorEnToCn;

console.log("here is room");

context = [
  {
    "roomId": 1,
    "roomName": "房间1",
    "plantId": 1,
    "plantName": "蘑菇",
    "time": "2013-12-25 16:41",
    "average": {
      temperature: 18,
      co2: 24,
      humidity: 150
    },
    "sensors": {
      'temperature': [1, 2, 3, 4, 5],
      'co2': [12, 13, 14, 15],
      'humidity': [23, 24, 25, 26, 27]
    },
    "brightness": "yellow",
    "nowPolicy": 1
  }, {
    "roomId": 2,
    "roomName": "房间2",
    "plantId": 2,
    "plantName": "蘑菇",
    "time": "2013-12-25 16:41",
    "average": {
      temperature: 18,
      co2: 24,
      humidity: 150
    },
    "sensors": {
      'temperature': [1, 2, 3, 4, 5],
      'co2': [12, 13, 14, 15],
      'humidity': [23, 24, 25, 26, 27]
    },
    "brightness": "yellow",
    "nowPolicy": 1
  }, {
    "roomId": 3,
    "roomName": "房间3",
    "plantId": 3,
    "plantName": "蘑菇",
    "time": "2013-12-25 16:41",
    "average": {
      temperature: 18,
      co2: 24,
      humidity: 150
    },
    "sensors": {
      'temperature': [1, 2, 3, 4, 5],
      'co2': [12, 13, 14, 15],
      'humidity': [23, 24, 25, 26, 27]
    },
    "brightness": "yellow",
    "nowPolicy": 1
  }
];

$("#create-new-policy-model").on('shown.bs.modal', function(e) {
  return getPolicyList({
    $renderTo: $("#create-new-policy-model .modal-body")
  });
});

sensorEnToCn = {
  "temperature": "温度",
  "co2": "二氧化碳",
  "humidity": "湿度"
};

render = function(tplName, context, tag, helper) {
  var html, source, template;
  source = $(tplName).html();
  template = Handlebars.compile(source);
  if (_.isString(tag) && _.isFunction(helper)) {
    Handlebars.registerHelper(tag, helper);
  }
  return html = template(context);
};

renderStatic = function(tplName, context, $renderTo) {
  var html;
  html = render(tplName, context);
  if ($renderTo) {
    $renderTo.html(html);
  }
  return html;
};

renderRoomMeta = function(context, $renderTo) {
  var html;
  html = render("#room-meta-template", context);
  if ($renderTo) {
    $renderTo.html(html);
  }
  return html;
};

renderSensorsList = function(context, $renderTo) {
  var html;
  html = render("#room-sensors-list-template", context, "cn-name", function(param) {
    var key;
    key = param.data.key;
    return sensorEnToCn[key] + "传感器";
  });
  if ($renderTo) {
    $renderTo.html(html);
  }
  return html;
};

AverageUI = (function() {
  function AverageUI($renderTo) {
    this.$renderTo = $renderTo;
  }

  AverageUI.prototype.render = function(context) {
    var $renderTo, html;
    $renderTo = this.$renderTo;
    html = render("#room-env-average-template", context, "cn-name", function(param) {
      var key;
      key = param.data.key;
      return sensorEnToCn[key] + "传感器";
    });
    if ($renderTo) {
      $renderTo.html(html);
    }
    this.update();
    return html;
  };

  AverageUI.prototype.update = function() {
    return console.log(this);
  };

  return AverageUI;

})();

renderRoom = function(context, $renderTo) {
  var html;
  html = render("#room-template", context);
  if ($renderTo) {
    $renderTo.html(html);
  }
  return html;
};

renderRoomList = function(context, $renderTo) {
  var html;
  html = render("#room-list-template", {
    context: context
  }, 'room-list', function() {
    return new Handlebars.SafeString(renderRoom(this));
  });
  if ($renderTo) {
    $renderTo.html(html);
  }
  return html;
};

renderRoomList(context, $('#room-list'));

$averages = $('.average');

console.log($averages);

Room = function(data) {
  var self, __data;
  __data = data || {};
  self = $.observable(this);
  self.update = function(data) {
    var average, sensors, time;
    console.log("here is update");
    time = data.time;
    if (__data.time !== time) {
      self.trigger("update:time", time);
    }
    average = data.average;
    if (_.isEqual(__data.average, average)) {
      self.trigger("update:time", average);
    }
    sensors = data.sensors;
    if (_.isEqual(__data.sensors, sensors)) {
      self.trigger("update:sensors", sensors);
    }
    return __data = data;
  };
};

RoomUI = (function() {
  function RoomUI(data, $renderTo) {
    var room;
    this.room = room = new Room(context[0]);
    this.data = data;
    this.$renderTo = $renderTo;
    $renderTo.append(renderStatic("#room-template", this.data));
    renderRoomMeta(data, $('.meta-info', $renderTo));
    renderStatic("#room-env-average-template", data);
  }

  RoomUI.prototype.render = function(data) {
    var $renderTo;
    data = data || this.data;
    return $renderTo = this.$renderTo;
  };

  RoomUI.prototype.update = function(data) {
    return this.room.update(data);
  };

  RoomUI.prototype.renderTime = function(time) {};

  return RoomUI;

})();
