// Generated by CoffeeScript 1.7.1
'use strict';
var $averages, AverageUI, Room, RoomList, RoomPresenter, render, renderRoom, renderRoomList, renderRoomMeta, renderSensorsList, renderStatic, sensorEnToCn;

sensorEnToCn = {
  "temperature": "温度",
  "co2": "二氧化碳",
  "humidity": "湿度",
  "light": "光照"
};

render = function(tplName, context, tag, helper) {
  var html, source, template;
  source = $(tplName).html();
  template = Handlebars.compile(source);
  if (_.isString(tag) && _.isFunction(helper)) {
    Handlebars.registerHelper(tag, helper);
  }
  return html = template(context);
};

renderStatic = function(tplName, context, $renderTo) {
  var html;
  html = render(tplName, context);
  if ($renderTo) {
    $renderTo.html(html);
  }
  return html;
};

renderRoomMeta = function(context, $renderTo) {
  var html;
  html = render("#room-meta-template", context);
  if ($renderTo) {
    $renderTo.html(html);
  }
  return html;
};

renderSensorsList = function(context, $renderTo) {
  var html;
  html = render("#room-sensors-list-template", context, "cn-name", function(param) {
    var key;
    key = param.data.key;
    return sensorEnToCn[key] + "传感器";
  });
  if ($renderTo) {
    $renderTo.html(html);
  }
  return html;
};

AverageUI = (function() {
  function AverageUI($renderTo) {
    this.$renderTo = $renderTo;
  }

  AverageUI.prototype.render = function(context) {
    var $renderTo, html;
    $renderTo = this.$renderTo;
    html = render("#room-env-average-template", context, "cn-name", function(param) {
      var key;
      key = param.data.key;
      return sensorEnToCn[key] + "传感器";
    });
    if ($renderTo) {
      $renderTo.html(html);
    }
    this.update();
    return html;
  };

  AverageUI.prototype.update = function() {
    return console.log(this);
  };

  return AverageUI;

})();

renderRoom = function(context, $renderTo) {
  var html;
  html = render("#room-template", context);
  if ($renderTo) {
    $renderTo.html(html);
  }
  return html;
};

renderRoomList = function(context, $renderTo) {
  var html;
  html = render("#room-list-template", {
    context: context
  }, 'room-list', function() {
    return new Handlebars.SafeString(renderRoom(this));
  });
  if ($renderTo) {
    $renderTo.html(html);
  }
  return html;
};

$averages = $('.average');

RoomList = (function() {
  function RoomList(data) {
    this.data = data || [];
    $.observable(this);
  }

  RoomList.prototype.add = function(data) {
    var room;
    console.log("add a room");
    room = new Room;
    room.add(data);
    return this.data.push(room);
  };

  RoomList.prototype.remove = function(room) {
    return console.log("remove a room");
  };

  RoomList.prototype.update = function(room) {
    return console.log("update a room");
  };

  return RoomList;

})();

Room = (function() {
  function Room(data) {
    $.observable(this);
    this.data = data || {};
    this.intervalTime = 6000;
    this.sync();
  }

  Room.prototype.init = function(data) {
    this.trigger("init", data);
    return this.data = data;
  };

  Room.prototype.getLatestData = function() {
    var e, roomId;
    try {
      roomId = this.data.roomId;
    } catch (_error) {
      e = _error;
      console.log(e.message);
    }
    if (roomId === void 0 || roomId === null) {
      return;
    }
    return $.ajax({
      url: "/data/room/" + roomId + "/latest_data/",
      type: "GET",
      success: (function(_this) {
        return function(data) {
          return _this.trigger("getLatestData", data);
        };
      })(this),
      fail: function() {
        return alert("[room.coffee] get room sensor failed");
      }
    });
  };

  Room.prototype.update = function(data) {
    var average, brightness, sensors, time, trigger, __data;
    trigger = this.trigger;
    __data = this.data;
    time = data.time;
    if (__data.time !== time) {
      trigger("update:time", time);
    }
    brightness = data.brightness;
    if (__data.brightness !== brightness) {
      trigger("update:brightness", brightness);
    }
    average = data.average;
    if (!_.isEqual(__data.average, average)) {
      trigger("update:average", average);
    }
    sensors = data.sensors;
    if (!_.isEqual(__data.sensors, sensors)) {
      trigger("update:sensors", sensors);
    }
    return this.data = data;
  };

  Room.prototype.sync = function() {
    return this.timer = setInterval((function(_this) {
      return function() {
        var e, roomId;
        try {
          roomId = _this.data.roomId;
        } catch (_error) {
          e = _error;
          console.log(e.message);
        }
        if (roomId === void 0 || roomId === null) {
          return;
        }
        return $.ajax({
          url: "/room/" + roomId,
          type: "GET",
          success: function(data) {
            return _this.update(data.body);
          },
          fail: function(data) {
            return alert("[room.coffee] sync room failed!");
          }
        });
      };
    })(this), this.intervalTime);
  };

  Room.prototype.stop = function() {
    return clearInterval(this.timer);
  };

  return Room;

})();

RoomPresenter = (function() {
  function RoomPresenter(model, $wrpelt) {
    var source;
    this.$wrpelt = $wrpelt;
    model.on("init", $.proxy(this.render, this));
    model.on("update:average", $.proxy(this.updateAverage, this));
    model.on("update:time", $.proxy(this.updateTime, this));
    model.on("update:brightness", $.proxy(this.updateBrightness, this));
    model.on("getLatestData", $.proxy(this.renderLatestData, this));
    source = $("#room-template").html();
    this.template = Handlebars.compile(source);
    Handlebars.registerHelper('cn-name', function(param) {
      var key;
      key = param.data.key;
      return sensorEnToCn[key] + "传感器";
    });
  }

  RoomPresenter.prototype.renderLatestData = function(data) {
    var html, source, template;
    source = $("#room-latest-data-template").html();
    template = Handlebars.compile(source);
    html = template(data.body);
    return $(".latest-data", this.$elt).html(html);
  };

  RoomPresenter.prototype.updateAverage = function(average) {
    var html, source, template;
    source = $("#room-average-template").html();
    template = Handlebars.compile(source);
    html = template({
      average: average
    });
    return $('.average', this.$elt).html(html);
  };

  RoomPresenter.prototype.updateTime = function(time) {
    return $('.capture-time', this.$elt).html("<p>" + time + "</p>");
  };

  RoomPresenter.prototype.updateBrightness = function(brightness) {
    return $('.brightness', this.$elt).html("<p class=" + brightness + ">" + brightness + "</p>");
  };

  RoomPresenter.prototype.render = function(data) {
    var $elt, $wrpelt, html, roomId, template;
    template = this.template;
    roomId = this.roomId = data.roomId;
    html = template(data);
    $wrpelt = this.$wrpelt;
    if ($wrpelt) {
      this.$elt = $elt = $(html).appendTo($wrpelt);
    }
    this.$widgetPanel = $('.widget-panel', this.$elt);
    this.closeButton = $('button.close', this.$widgetPanel);
    return this.closeButton.click($.proxy(this.closePanel, this));
  };

  RoomPresenter.prototype.closePanel = function(e) {
    var $button;
    $button = $(e.target).closest("button");
    $button.addClass("hide");
    return $button.siblings(".active").removeClass("active");
  };

  RoomPresenter.prototype.clickWidget = function(e) {
    var $link, $renderTo, href, name, pid, policyAdd, policyNow;
    if (e) {
      e.preventDefault();
    }
    $link = $($(e.target).closest('a'));
    href = $link.attr("href").split("/");
    name = "" + href[2] + "-" + href[3];
    this.$widgetPanel.children().removeClass("active").filter(function(index, elt) {
      return name === $(elt).attr("name");
    }).addClass("active");
    this.closeButton.removeClass("hide");
    $renderTo = $("[name=" + name + "]", this.$elt);
    switch (name) {
      case "policy-add":
        if (this.ppAdd) {
          break;
        }
        policyAdd = new Policy;
        return this.ppAdd = new PolicyPresenter(policyAdd, $renderTo, "edit");
      case "policy-now":
        if (this.ppNow) {
          break;
        }
        pid = $link.attr("pid");
        pid = 8;
        policyNow = new Policy(pid);
        return this.ppNow = new PolicyPresenter(policyNow, $renderTo, "view");
      case "controller-list":
        if (this.cl) {
          break;
        }
        return this.cl = new ControllerList({
          $renderTo: $renderTo,
          roomId: this.roomId
        });
      default:
        break;
    }
  };

  return RoomPresenter;

})();
